import math

landscape_blocks = []  # Replace with your landscape blocks
path = []
tiles = {}  # Tile types and their quantities
targets = {}  # Target counts for each bush type


def read_tiles_problem(file_path):
    landscape = []
    tiles = {}
    targets = {}
    solution = []

    section_number = 0

    with open(file_path, "r") as file:
        for line in file:
            line_striped = line.strip()
            if line_striped.startswith("#"):
                section_number += 1
                continue

            if section_number == 2:  # Landscape
                landscape.append(line)
            elif section_number == 3:  # Tiles
                pairs = line_striped.split(", ")
                for pair in pairs:
                    pair = pair.replace("{", "").replace("}", "")
                    if "=" in pair:
                        key, value = pair.split("=", maxsplit=1)
                        tiles[key.strip()] = int(value.strip())
            elif section_number == 4:  # Targets
                parts = line_striped.split(":", maxsplit=1)
                if len(parts) == 2:
                    target, count = parts
                    targets[int(target)] = int(count)

            elif section_number == 6:  # Solution
                parts = line_striped.split()
                if len(parts) == 3:
                    index, count, tile_type = parts
                    solution.append((int(index), int(count), tile_type))

    return {
        "landscape": landscape,
        "tiles": tiles,
        "targets": targets,
        "solution": solution,
    }


def convert_landscape_to_2d_array(landscape):
    max_length = max(((len(line) + 1) // 2 for line in landscape), default=0)

    landscape_2d = []
    for line in landscape:
        row = []
        for i, chr in enumerate(line):
            if i % 2 == 0:
                row.append(int(chr) if chr.isdigit() else 0)
        row.extend([0] * (max_length - len(row)))
        landscape_2d.append(row[:-1])
    return landscape_2d[:-1]


def split_into_4x4_blocks(landscape_2d):
    blocks = []
    rows = len(landscape_2d)
    cols = len(landscape_2d[0]) if rows > 0 else 0

    for i in range(0, rows, 4):
        for j in range(0, cols, 4):
            block = [row[j : j + 4] for row in landscape_2d[i : i + 4]]
            blocks.append(block)

    return blocks


def print_blocks(blocks):
    for block_index, block in enumerate(blocks):
        print(f"Block {block_index + 1}:")
        for row in block:
            print(" ".join(map(str, row)))
        print()


class CSP:

    def __init__(self):
        self.Solution = []
        self.TwoD_Land = []
        self.tiles = {}  # Tile types and their quantities
        self.target = {}  # Target counts for each bush type

    def read_tiles_problem(self, file_path):
        landscape = []
        tiles = {}
        targets = {}
        solution = []

        section_number = 0

        with open(file_path, "r") as file:
            maze = []
            Line_Num = 1
            for line in file:
                line_striped = line.strip()
                if line_striped.startswith("#"):
                    section_number += 1
                    continue

                if section_number == 2:  # Landscap
                    landscape.append(line)
                    Line_Num += 1

                    processed_line = [int(char.replace(" ", "0")) for char in line[:-1]]
                    processed_line = processed_line[::2]

                    maze.append(processed_line)

                    if Line_Num > len(processed_line) - 1:
                        pass

                elif section_number == 3:  # Tiles
                    pairs = line_striped.split(", ")
                    for pair in pairs:
                        pair = pair.replace("{", "").replace("}", "")
                        if "=" in pair:
                            key, value = pair.split("=", maxsplit=1)
                            tiles[key.strip()] = int(value.strip())
                elif section_number == 4:  # Targets
                    parts = line_striped.split(":", maxsplit=1)
                    if len(parts) == 2:
                        target, count = parts
                        targets[int(target)] = int(count)

                elif section_number == 6:  # Solution
                    parts = line_striped.split()
                    if len(parts) == 3:
                        index, count, tile_type = parts
                        solution.append((int(index), int(count), tile_type))
        # print("maze prev:", landscape)
        # print(maze)
        land = []
        for i in range(0, len(maze), 4):
            for j in range(0, len(maze[0]), 4):
                block = [row[j : j + 4] for row in maze[i : i + 4]]
                land.append(block)
        for _ in range(5):
            land.pop()

        """
        print("land:", land)
        print(land == self.TwoD_Land)
        print(type(land))
        print(type(land[0][0][0]))
        """
        self.TwoD_Land = land
        self.tiles = tiles
        self.target = targets

        # self.TwoD_Land = split_into_4x4_blocks(landscape)

    def print_solution_tiles(self, Solution):
        n = int(len(Solution) ** 0.5)
        for i in range(n):
            for j in range(n):
                tile_index = i * n + j
                if tile_index < len(Solution):
                    print(f"{Solution[tile_index]:<15}", end="")
                else:
                    print(" " * 15, end="")
            print()

    def Full_B(self, block):
        return {1: 0, 2: 0, 3: 0, 4: 0}

    def Outer_B(self, block):

        result = {bush_type: 0 for bush_type in range(1, 5)}

        central_portion = [row[1:3] for row in block[1:3]]

        for bush_type in result.keys():
            result[bush_type] = sum(row.count(bush_type) for row in central_portion)

        return result

    def L_shape_B(self, block, mode):

        result = {bush_type: 0 for bush_type in range(1, 5)}

        if mode == 1:
            relevant_portion = [row[1:] for row in block[:-1]]
        elif mode == 2:
            relevant_portion = [row[1:] for row in block[1:]]
        elif mode == 3:
            relevant_portion = [row[:-1] for row in block[:-1]]
        elif mode == 4:
            relevant_portion = [row[:-1] for row in block[1:]]

        for bush_type in result:
            result[bush_type] = sum(row.count(bush_type) for row in relevant_portion)

        return result

    def L_shape_1(self, block):
        return self.L_shape_B(block, 1)

    def L_shape_2(self, block):
        return self.L_shape_B(block, 2)

    def L_shape_3(self, block):
        return self.L_shape_B(block, 3)

    def L_shape_4(self, block):
        return self.L_shape_B(block, 4)

    def apply(self, func, block):
        return func(block)

    def check(self, current_state, path):

        count_L_shapes = sum(
            path.count(f"L_shape_{i}") for i in range(1, 5)
        )  # all kinds of L shape
        count_full_blocks = path.count("Full_block")
        count_outer_blocks = path.count("Outer_block")

        if any(
            [
                count_L_shapes > self.tiles["EL_SHAPE"],
                count_full_blocks > self.tiles["FULL_BLOCK"],
                count_outer_blocks > self.tiles["OUTER_BOUNDARY"],
            ]
        ):
            return 2

        differences = {
            key: self.target[key] - current_state.get(key, 0) for key in self.target
        }

        if all(diff == 0 for diff in differences.values()):
            return 1

        if any(diff < 0 for diff in differences.values()):
            return 2

        return None

    def CSP(self, current_index, current_bush_counts, tile_functions):

        if current_index == len(self.TwoD_Land):

            return self.check(current_bush_counts, self.Solution) == 1
        sorted_functions = sorted(
            tile_functions,
            key=lambda func: sum(
                value > 0 for value in func(self.TwoD_Land[current_index]).values()
            ),
        )

        for function in sorted_functions:

            self.Solution.append(function.__name__)

            block_result = self.apply(function, self.TwoD_Land[current_index])

            updated_counts = {
                bush: current_bush_counts.get(bush, 0) + block_result.get(bush, 0)
                for bush in block_result
            }

            validation_result = self.check(updated_counts, self.Solution)
            if validation_result == 2:

                self.Solution.pop()
                continue

            if self.CSP(current_index + 1, updated_counts, tile_functions):
                return True
            else:

                self.Solution.pop()

        return False

    def LandScape_Path(self):
        def reset_matrix():
            return [[-1] * 4 for _ in range(4)]

        def apply_pattern(block, pattern):
            pattern_actions = {
                "Full_block": lambda b: [[1 for _ in row] for row in b],
                "Outer_block": lambda b: [
                    [
                        1 if (i == 0 or i == 3 or j == 0 or j == 3) else b[i][j]
                        for j in range(4)
                    ]
                    for i in range(4)
                ],
                "L_shape_1": lambda b: [
                    [
                        1 if (i < 3 and j == 0) or (i == 2 and j < 3) else b[i][j]
                        for j in range(4)
                    ]
                    for i in range(4)
                ],
                "L_shape_2": lambda b: [
                    [
                        1 if (i < 3 and j == 3) or (i == 2 and j > 0) else b[i][j]
                        for j in range(4)
                    ]
                    for i in range(4)
                ],
                "L_shape_3": lambda b: [
                    [
                        1 if (i > 0 and j == 0) or (i == 1 and j < 3) else b[i][j]
                        for j in range(4)
                    ]
                    for i in range(4)
                ],
                "L_shape_4": lambda b: [
                    [
                        1 if (i > 0 and j == 3) or (i == 1 and j > 0) else b[i][j]
                        for j in range(4)
                    ]
                    for i in range(4)
                ],
            }

            if pattern in pattern_actions:
                return pattern_actions[pattern](block)
            else:
                return block

        def BushCount(block):
            bush_counts = {
                bush_type: sum(row.count(bush_type) for row in block)
                for bush_type in range(1, 5)
            }
            return bush_counts

        updated_land = [
            apply_pattern(block, pattern)
            for block, pattern in zip(self.TwoD_Land, self.Solution)
        ]
        bush_counts = [BushCount(block) for block in updated_land]

        self.TwoD_Land = updated_land
        return bush_counts


constraint_solver = CSP()
"""
tile1.txt
tile2.txt
tilesproblem_1326658931783100.txt
"""
file_path = "tile1.txt"
problem = read_tiles_problem(file_path)

landscape = convert_landscape_to_2d_array(problem["landscape"])
landscape_split = split_into_4x4_blocks(landscape)

print("landscape", landscape_split)
for row in landscape:
    print(" ".join(map(str, row)))
# print_blocks(landscape_split)

tiles = problem["tiles"]
targets = problem["targets"]
print(problem)

tile_functions = [
    getattr(constraint_solver, "L_shape_" + str(i)) for i in range(1, 5)
] + [constraint_solver.Full_B, constraint_solver.Outer_B]


constraint_solver.read_tiles_problem(file_path)

bush_counts = {}
for key in [1, 2, 3, 4]:
    bush_counts[key] = 0


result = constraint_solver.CSP(0, bush_counts, tile_functions)
constraint_solver.print_solution_tiles(constraint_solver.Solution)

# printprintnt_solver.landprinter
# rintprintprintprint_blocks(constraint_solver.landscape_bloclandsprin
