import math

landscape_blocks = []  # Replace with your landscape blocks
path = []
tiles = {}  # Tile types and their quantities
targets = {}  # Target counts for each bush type


def read_tiles_problem(file_path):
    landscape = []
    tiles = {}
    targets = {}
    solution = []

    section_number = 0

    with open(file_path, "r") as file:
        for line in file:
            line_striped = line.strip()
            if line_striped.startswith("#"):
                section_number += 1
                continue

            if section_number == 2:  # Landscape
                landscape.append(line)
            elif section_number == 3:  # Tiles
                pairs = line_striped.split(", ")
                for pair in pairs:
                    pair = pair.replace("{", "").replace("}", "")
                    if "=" in pair:
                        key, value = pair.split("=", maxsplit=1)
                        tiles[key.strip()] = int(value.strip())
            elif section_number == 4:  # Targets
                parts = line_striped.split(":", maxsplit=1)
                if len(parts) == 2:
                    target, count = parts
                    targets[int(target)] = int(count)

            elif section_number == 6:  # Solution
                parts = line_striped.split()
                if len(parts) == 3:
                    index, count, tile_type = parts
                    solution.append((int(index), int(count), tile_type))

    return {
        "landscape": landscape,
        "tiles": tiles,
        "targets": targets,
        "solution": solution,
    }


def convert_landscape_to_2d_array(landscape):
    max_length = max(((len(line) + 1) // 2 for line in landscape), default=0)

    landscape_2d = []
    for line in landscape:
        row = []
        for i, chr in enumerate(line):
            if i % 2 == 0:
                row.append(int(chr) if chr.isdigit() else 0)
        row.extend([0] * (max_length - len(row)))
        landscape_2d.append(row[:-1])
    return landscape_2d[:-1]


def split_into_4x4_blocks(landscape_2d):
    blocks = []
    rows = len(landscape_2d)
    cols = len(landscape_2d[0]) if rows > 0 else 0

    for i in range(0, rows, 4):
        for j in range(0, cols, 4):
            block = [row[j : j + 4] for row in landscape_2d[i : i + 4]]
            blocks.append(block)

    return blocks


def print_blocks(blocks):
    for block_index, block in enumerate(blocks):
        print(f"Block {block_index + 1}:")
        for row in block:
            print(" ".join(map(str, row)))
        print()


class CSP:

    def __init__(self):
        self.Solution = []
        self.TwoD_Land = []
        self.tiles = {}  # Tile types and their quantities
        self.target = {}  # Target counts for each bush type

    def read_tiles_problem(self, file_path):
        landscape = []
        tiles = {}
        targets = {}
        solution = []

        section_number = 0

        with open(file_path, "r") as file:
            maze = []
            Line_Num = 1
            for line in file:
                line_striped = line.strip()
                if line_striped.startswith("#"):
                    section_number += 1
                    continue

                if section_number == 2:  # Landscape
                    landscape.append(line)
                    Line_Num += 1
                    lin = list(line)[:-1]
                    lin = list(map(lambda x: x.replace(" ", "0"), lin))
                    lin = list(map(lambda x: int(x), lin))
                    lin = [ele for idx, ele in enumerate(lin) if idx % 2 == 0]
                    maze.append(lin)
                    if Line_Num > len(lin) - 1:
                        pass

                elif section_number == 3:  # Tiles
                    pairs = line_striped.split(", ")
                    for pair in pairs:
                        pair = pair.replace("{", "").replace("}", "")
                        if "=" in pair:
                            key, value = pair.split("=", maxsplit=1)
                            tiles[key.strip()] = int(value.strip())
                elif section_number == 4:  # Targets
                    parts = line_striped.split(":", maxsplit=1)
                    if len(parts) == 2:
                        target, count = parts
                        targets[int(target)] = int(count)

                elif section_number == 6:  # Solution
                    parts = line_striped.split()
                    if len(parts) == 3:
                        index, count, tile_type = parts
                        solution.append((int(index), int(count), tile_type))
        # print("maze prev:", landscape)
        # print(maze)
        land = []
        for i in range(0, len(maze), 4):
            for j in range(0, len(maze[0]), 4):
                block = [row[j : j + 4] for row in maze[i : i + 4]]
                land.append(block)
        for _ in range(5):
            land.pop()

        """
        print("land:", land)
        print(land == self.TwoD_Land)
        print(type(land))
        print(type(land[0][0][0]))
        """
        self.TwoD_Land = land
        self.tiles = tiles
        self.target = targets

        # self.TwoD_Land = split_into_4x4_blocks(landscape)

    def Full_block(self, block):
        return {1: 0, 2: 0, 3: 0, 4: 0}

    def Outer_block(self, block):

        result = {bush_type: 0 for bush_type in range(1, 5)}

        central_portion = [row[1:3] for row in block[1:3]]

        for bush_type in result.keys():
            result[bush_type] = sum(row.count(bush_type) for row in central_portion)

        return result

    def calculate_L_shape(self, block, mode):

        result = {bush_type: 0 for bush_type in range(1, 5)}

        if mode == 1:
            relevant_portion = [row[1:] for row in block[:-1]]
        elif mode == 2:
            relevant_portion = [row[1:] for row in block[1:]]
        elif mode == 3:
            relevant_portion = [row[:-1] for row in block[:-1]]
        elif mode == 4:
            relevant_portion = [row[:-1] for row in block[1:]]
        else:
            raise ValueError("Invalid mode for L-shape calculation.")

        for bush_type in result:
            result[bush_type] = sum(row.count(bush_type) for row in relevant_portion)

        return result

    def L_shape_1(self, block):
        return self.calculate_L_shape(block, 1)

    def L_shape_2(self, block):
        return self.calculate_L_shape(block, 2)

    def L_shape_3(self, block):
        return self.calculate_L_shape(block, 3)

    def L_shape_4(self, block):
        return self.calculate_L_shape(block, 4)

    def apply(self, func, block):
        return func(block)

    def check(self, current_state, path):
        # 计算每种瓷砖使用的次数
        count_L_shapes = sum(path.count(f"L_shape_{i}") for i in range(1, 5))
        count_full_blocks = path.count("Full_block")
        count_outer_blocks = path.count("Outer_block")

        # 检查瓷砖使用量是否超标
        if any(
            [
                count_L_shapes > self.tiles["EL_SHAPE"],
                count_full_blocks > self.tiles["FULL_BLOCK"],
                count_outer_blocks > self.tiles["OUTER_BOUNDARY"],
            ]
        ):
            return 2

        # 计算与目标状态的差异
        differences = {
            key: self.target[key] - current_state.get(key, 0) for key in self.target
        }

        # 检查是否达到目标状态
        if all(diff == 0 for diff in differences.values()):
            return 1

        # 检查是否有过多的灌木丛被揭露
        if any(diff < 0 for diff in differences.values()):
            return 2

        return None

    def csp_with_MRV(self, current_index, current_bush_counts, tile_functions):

        if current_index == len(self.TwoD_Land):

            return self.check(current_bush_counts, self.Solution) == 1
        sorted_functions = sorted(
            tile_functions,
            key=lambda func: sum(
                value > 0 for value in func(self.TwoD_Land[current_index]).values()
            ),
        )

        for function in sorted_functions:

            self.Solution.append(function.__name__)

            block_result = self.apply(function, self.TwoD_Land[current_index])

            updated_counts = {
                bush: current_bush_counts.get(bush, 0) + block_result.get(bush, 0)
                for bush in block_result
            }

            validation_result = self.check(updated_counts, self.Solution)
            if validation_result == 2:

                self.Solution.pop()
                continue

            if self.csp_with_MRV(current_index + 1, updated_counts, tile_functions):
                return True
            else:

                self.Solution.pop()

        return False

    def apply_path_to_landscape(self):
        def reset_matrix():
            return [[-1] * 4 for _ in range(4)]

        def apply_pattern(source, pattern):

            pattern_areas = {
                "Full_block": (
                    None,
                    None,
                    None,
                    None,
                ),
                "Outer_block": (1, 3, 1, 3),
                "L_shape_1": (0, 3, 1, 4),
                "L_shape_2": (1, 4, 1, 4),
                "L_shape_3": (0, 3, 0, 3),
                "L_shape_4": (1, 4, 0, 3),
            }

            row_start, row_end, col_start, col_end = pattern_areas[pattern]
            row_end = None if row_end == 4 else row_end
            col_end = None if col_end == 4 else col_end

            new_block = reset_matrix()
            if pattern != "Full_block":
                for row_index, row in enumerate(source[row_start:row_end]):
                    dest_row_index = row_index + row_start
                    new_block[dest_row_index][col_start:col_end] = row[
                        col_start:col_end
                    ]
            return new_block

        def calculate_bushes(block):
            bush_counts = {
                bush_type: sum(row.count(bush_type) for row in block)
                for bush_type in range(1, 5)
            }
            return bush_counts

        updated_land = [
            apply_pattern(block, pattern)
            for block, pattern in zip(self.TwoD_Land, self.Solution)
        ]
        bush_counts = [calculate_bushes(block) for block in updated_land]

        self.TwoD_Land = updated_land
        return bush_counts


def print_landscape_with_blocks(landscape_blocks):

    blocks_per_row = int(math.sqrt(len(landscape_blocks)))
    for i in range(0, len(landscape_blocks), blocks_per_row):
        for row in range(4):
            for block_index in range(i, i + blocks_per_row):
                block = landscape_blocks[block_index]

                print(
                    " ".join(str(cell if cell != -1 else 0) for cell in block[row]),
                    end="   ",
                )
            print()
        print("\n" * 2)


constraint_solver = CSP()
"""
tile1.txt
tile2.txt
tilesproblem_1326658931783100.txt
"""
file_path = "tile1.txt"
problem = read_tiles_problem(file_path)

landscape = convert_landscape_to_2d_array(problem["landscape"])
landscape_split = split_into_4x4_blocks(landscape)

print("landscape", landscape_split)
for row in landscape:
    print(" ".join(map(str, row)))
# print_blocks(landscape_split)

tiles = problem["tiles"]
targets = problem["targets"]
print(problem)

tile_functions = [
    getattr(constraint_solver, "L_shape_" + str(i)) for i in range(1, 5)
] + [constraint_solver.Full_block, constraint_solver.Outer_block]


constraint_solver.read_tiles_problem(file_path)


result = constraint_solver.csp_with_MRV(
    0, dict.fromkeys([1, 2, 3, 4], 0), tile_functions
)
if result:
    print(f"\nTarget: {constraint_solver.target}\n")
    print("Solution:")
    print(constraint_solver.Solution, "\n")
    constraint_solver.apply_path_to_landscape()
    print_landscape_with_blocks(constraint_solver.TwoD_Land)

    # print_blocks(constraint_solver.landscape_blocks)
else:
    print("No path found.\n")
